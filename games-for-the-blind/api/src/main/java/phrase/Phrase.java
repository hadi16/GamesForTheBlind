package phrase;

import org.jetbrains.annotations.NotNull;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.InputStream;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Map;
import java.util.Objects;

import static java.util.Map.entry;
import static java.util.Map.ofEntries;

/**
 * Contains all audio phrases in the program along with logic to map between Phrases & keyboard keys, numbers, etc.
 */
public enum Phrase {
    /* General: Blank or Empty Phrases */
    BLANK(" "),
    EMPTY("EMPTY"), // Note: this audio file was not generated by Google Cloud TTS.

    /* General: Numeric Phrases */
    ZERO("0"),
    ONE("1"),
    TWO("2"),
    THREE("3"),
    FOUR("4"),
    FIVE("5"),
    SIX("6"),
    SEVEN("7"),
    EIGHT("8"),
    NINE("9"),
    TEN("10"),
    ELEVEN("11"),
    TWELVE("12"),
    THIRTEEN("13"),
    FOURTEEN("14"),
    FIFTEEN("15"),
    SIXTEEN("16"),
    SEVENTEEN("17"),
    EIGHTEEN("18"),
    NINETEEN("19"),
    TWENTY("20"),
    TWENTY_ONE("21"),
    TWENTY_TWO("22"),
    TWENTY_THREE("23"),
    TWENTY_FOUR("24"),
    TWENTY_FIVE("25"),
    TWENTY_SIX("26"),
    TWENTY_SEVEN("27"),
    TWENTY_EIGHT("28"),
    TWENTY_NINE("29"),
    THIRTY("30"),

    /* General: Keyboard Key Phrases */
    A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,
    SHIFT, SLASH, BACKSLASH, ENTER, EQUALS, MINUS, SEMICOLON, COMMA, PERIOD, QUOTE, ESCAPE,
    UP, DOWN, LEFT, RIGHT, CONTROL, BACKSPACE, ALT,
    CAPS_LOCK("CAPS LOCK"), BACK_QUOTE("BACK QUOTE"),
    OPEN_BRACKET("OPEN BRACKET"), CLOSE_BRACKET("CLOSE BRACKET"),

    /* General: Congratulations message */
    CONGRATS("YOU'VE FINISHED THE GAME! CONGRATULATIONS!"),

    /* General: Error Phrases */
    UNRECOGNIZED_KEY("An unrecognized key was pressed on the keyboard:"),

    /* Loader */
    SPACE_FOR_EXIT("Press the SPACE BAR to exit."),
    SPACE_FOR_SUDOKU("Press the SPACE BAR to play Sudoku."),
    SPACE_FOR_MASTERMIND("Press the SPACE BAR to play Mastermind."),
    GO_BACK_TO_GAME_SELECTION("Press the SPACE BAR to go back to the game selection screen."),
    SELECT_SUDOKU_FOUR("Press the SPACE BAR to play the 4 by 4 version of Sudoku."),
    SELECT_SUDOKU_SIX("Press the SPACE BAR to play the 6 by 6 version of Sudoku."),
    SELECT_SUDOKU_NINE("Press the SPACE BAR to play the 9 by 9 version of Sudoku."),
    WHICH_SUDOKU_GAME_ALL("Which Sudoku game would you like to play, 4 by 4, 6 by 6, or 9 by 9? " +
            "Use the arrow keys to make your selection."),
    WHICH_SUDOKU_GAME_NO_SIX("Which Sudoku game would you like to play, 4 by 4 or 9 by 9? " +
            "Use the arrow keys to make your selection."),
    PLAY_OR_EXIT("Would you like to play Sudoku, Mastermind, or exit? Use the arrow keys to make your selection."),
    EXITING("The game is exiting. Goodbye!"),
    
    /* Sudoku: locations */
    A1, A2, A3, A4, A5, A6, A7, A8, A9,
    B1, B2, B3, B4, B5, B6, B7, B8, B9,
    C1, C2, C3, C4, C5, C6, C7, C8, C9,
    D1, D2, D3, D4, D5, D6, D7, D8, D9,
    E1, E2, E3, E4, E5, E6, E7, E8, E9,
    F1, F2, F3, F4, F5, F6, F7, F8, F9,
    G1, G2, G3, G4, G5, G6, G7, G8, G9,
    H1, H2, H3, H4, H5, H6, H7, H8, H9,
    I1, I2, I3, I4, I5, I6, I7, I8, I9,

    /* Sudoku: numbers in same row/column/block */
    IN_ROW("You have the following numbers in the same row:"),
    IN_COLUMN("You have the following numbers in the same column:"),
    IN_BLOCK("You have the following numbers in the same block:"),

    /* Sudoku: Error Phrases */
    NO_SELECTED_SQUARE("You didn't select a square first."),
    CANNOT_DELETE_ORIGINAL("You cannot delete an originally set square on the board."),
    CANNOT_DELETE_EMPTY("You are trying to delete an already empty square."),
    CELL_VALUE_INVALID("This value is invalid for the cell."),
    PLACED_CELL_UNSOLVABLE("Placing this value here would make the board unsolvable."),
    SELECTED_BOTH("You have already selected both a block & square on the board."),

    /* Sudoku: invalid number to fill Phrases */
    INVALID_NUMBER_TO_FILL_4("The number to fill must be between 1 and 4"),
    INVALID_NUMBER_TO_FILL_6("The number to fill must be between 1 and 6"),
    INVALID_NUMBER_TO_FILL_9("The number to fill must be between 1 and 9"),

    /* Sudoku: Instructions Phrases. */
    INSTRUCTIONS_4("Welcome to Sudoku! Each of the four blocks must contain the numbers 1 through 4 " +
            "within its square. Each number can only appear once in a row, column or box. Each four-square column, " +
            "or four-square row, within the entire board, must also have the numbers 1 through 4, without repetition." +
            "To hear the numbers in the currently selected number's row press J, to hear the numbers in the " +
            " currently selected number's column press K, to hear all of the numbers in the current block press L." +
            "If you have selected an empty square and are stuck, press H to automatically fill in the square."),

    INSTRUCTIONS_6("Welcome to Sudoku! Each of the six blocks must contain the numbers 1 through 6 " +
            "within its square. Each number can only appear once in a row, column or box. Each six-square column, " +
            "or six-square row, within the entire board, must also have the numbers 1 through 6, without repetition." +
            "To hear the numbers in the currently selected number's row press J, to hear the numbers in the " +
            " currently selected number's column press K, to hear all of the numbers in the current block press L." +
            "If you have selected an empty square and are stuck, press H to automatically fill in the square."),

    INSTRUCTIONS_9("Welcome to Sudoku! Each of the nine blocks must contain the numbers 1 through 9 " +
            "within its square. Each number can only appear once in a row, column or box. Each nine-square column, " +
            "or nine-square row, within the entire board, must also have the numbers 1 through 9, without repetition." +
            "To hear the numbers in the currently selected number's row press J, to hear the numbers in the " +
            " currently selected number's column press K, to hear all of the numbers in the current block press L." +
            "If you have selected an empty square and are stuck, press H to automatically fill in the square."),

    /* Sudoku: Empty Squares Left */
    EMPTY_PIECES_OF_BOARD_PLURAL_1("There are"),
    EMPTY_PIECES_OF_BOARD_PLURAL_2("empty squares left on the board."),
    EMPTY_PIECES_OF_BOARD_SINGULAR_1("There is"),
    EMPTY_PIECES_OF_BOARD_SINGULAR_2("empty square left on the board."),
    EMPTY_PIECES_IN_SECTION("empty squares left in this section."),

    /* Sudoku: Information Phrases */
    CURRENT_VALUE("The current value in this box is"),
    PLACED_NUM("You have placed a"),
    REMOVED_NUM("You have removed the number");

    /**
     * The directory for all of the Phrase audio files ("resources/phrases" folder under the root of the project).
     */
    public static final Path PHRASE_FILES_DIRECTORY = Paths.get(
            System.getProperty("user.dir"), "../application/src/main/resources/phrases/"
    );

    /**
     * The Phrase's String value, which is the phrase that needs to be fetched via the Google Cloud API.
     */
    private final String phraseValue;

    /**
     * Creates a new Phrase
     * When no phrase value is passed, just set the phrase value to the name of the enumeration member.
     */
    Phrase() {
        this.phraseValue = this.name();
    }

    /**
     * Creates a new Phrase
     *
     * @param phraseValue The phrase value to set to the given enumeration member.
     */
    Phrase(@NotNull String phraseValue) {
        this.phraseValue = phraseValue;
    }

    /**
     * Converts a key code on the keyboard to a Phrase. If no mapping exists, return Phrase.EMPTY.
     *
     * @param keyCode The key code on the keyboard to convert.
     * @return A Phrase that represents the passed key code from the keyboard.
     */
    public static Phrase keyCodeToPhrase(int keyCode) {
        @SuppressWarnings("JavacQuirks") final Map<Integer, Phrase> KEY_CODE_TO_PHRASE = ofEntries(
                /* Numeric keyboard values */
                entry(KeyEvent.VK_0,                Phrase.ZERO),
                entry(KeyEvent.VK_1,                Phrase.ONE),
                entry(KeyEvent.VK_2,                Phrase.TWO),
                entry(KeyEvent.VK_3,                Phrase.THREE),
                entry(KeyEvent.VK_4,                Phrase.FOUR),
                entry(KeyEvent.VK_5,                Phrase.FIVE),
                entry(KeyEvent.VK_6,                Phrase.SIX),
                entry(KeyEvent.VK_7,                Phrase.SEVEN),
                entry(KeyEvent.VK_8,                Phrase.EIGHT),
                entry(KeyEvent.VK_9,                Phrase.NINE),

                /* Numeric numpad keyboard values */
                entry(KeyEvent.VK_NUMPAD0,          Phrase.ZERO),
                entry(KeyEvent.VK_NUMPAD1,          Phrase.ONE),
                entry(KeyEvent.VK_NUMPAD2,          Phrase.TWO),
                entry(KeyEvent.VK_NUMPAD3,          Phrase.THREE),
                entry(KeyEvent.VK_NUMPAD4,          Phrase.FOUR),
                entry(KeyEvent.VK_NUMPAD5,          Phrase.FIVE),
                entry(KeyEvent.VK_NUMPAD6,          Phrase.SIX),
                entry(KeyEvent.VK_NUMPAD7,          Phrase.SEVEN),
                entry(KeyEvent.VK_NUMPAD8,          Phrase.EIGHT),
                entry(KeyEvent.VK_NUMPAD9,          Phrase.NINE),

                /* Alphabetic keyboard values */
                entry(KeyEvent.VK_A,                Phrase.A),
                entry(KeyEvent.VK_B,                Phrase.B),
                entry(KeyEvent.VK_C,                Phrase.C),
                entry(KeyEvent.VK_D,                Phrase.D),
                entry(KeyEvent.VK_E,                Phrase.E),
                entry(KeyEvent.VK_F,                Phrase.F),
                entry(KeyEvent.VK_G,                Phrase.G),
                entry(KeyEvent.VK_H,                Phrase.H),
                entry(KeyEvent.VK_I,                Phrase.I),
                entry(KeyEvent.VK_J,                Phrase.J),
                entry(KeyEvent.VK_K,                Phrase.K),
                entry(KeyEvent.VK_L,                Phrase.L),
                entry(KeyEvent.VK_M,                Phrase.M),
                entry(KeyEvent.VK_N,                Phrase.N),
                entry(KeyEvent.VK_O,                Phrase.O),
                entry(KeyEvent.VK_P,                Phrase.P),
                entry(KeyEvent.VK_Q,                Phrase.Q),
                entry(KeyEvent.VK_R,                Phrase.R),
                entry(KeyEvent.VK_S,                Phrase.S),
                entry(KeyEvent.VK_T,                Phrase.T),
                entry(KeyEvent.VK_U,                Phrase.U),
                entry(KeyEvent.VK_V,                Phrase.V),
                entry(KeyEvent.VK_W,                Phrase.W),
                entry(KeyEvent.VK_X,                Phrase.X),
                entry(KeyEvent.VK_Y,                Phrase.Y),
                entry(KeyEvent.VK_Z,                Phrase.Z),

                /* Arrow key keyboard values */
                entry(KeyEvent.VK_UP,               Phrase.UP),
                entry(KeyEvent.VK_DOWN,             Phrase.DOWN),
                entry(KeyEvent.VK_LEFT,             Phrase.LEFT),
                entry(KeyEvent.VK_RIGHT,            Phrase.RIGHT),

                /* Other keyboard values */
                entry(KeyEvent.VK_SHIFT,            Phrase.SHIFT),
                entry(KeyEvent.VK_SLASH,            Phrase.SLASH),
                entry(KeyEvent.VK_BACK_SLASH,       Phrase.BACKSLASH),
                entry(KeyEvent.VK_ENTER,            Phrase.ENTER),
                entry(KeyEvent.VK_EQUALS,           Phrase.EQUALS),
                entry(KeyEvent.VK_MINUS,            Phrase.MINUS),
                entry(KeyEvent.VK_SEMICOLON,        Phrase.SEMICOLON),
                entry(KeyEvent.VK_COMMA,            Phrase.COMMA),
                entry(KeyEvent.VK_PERIOD,           Phrase.PERIOD),
                entry(KeyEvent.VK_QUOTE,            Phrase.QUOTE),
                entry(KeyEvent.VK_CAPS_LOCK,        Phrase.CAPS_LOCK),
                entry(KeyEvent.VK_CONTROL,          Phrase.CONTROL),
                entry(KeyEvent.VK_BACK_SPACE,       Phrase.BACKSPACE),
                entry(KeyEvent.VK_OPEN_BRACKET,     Phrase.OPEN_BRACKET),
                entry(KeyEvent.VK_CLOSE_BRACKET,    Phrase.CLOSE_BRACKET),
                entry(KeyEvent.VK_BACK_QUOTE,       Phrase.BACK_QUOTE),
                entry(KeyEvent.VK_ESCAPE,           Phrase.ESCAPE),
                entry(KeyEvent.VK_ALT,              Phrase.ALT)
        );

        // Return just an empty Phrase to prevent a null ptr exception (calls audio file that contains no sound).
        return Objects.requireNonNullElse(KEY_CODE_TO_PHRASE.get(keyCode), Phrase.BLANK);
    }

    /**
     * Converts a number between 0 (inclusive) & 30 (inclusive) to a numeric Phrase (0 maps to EMPTY).
     *
     * @param numberToConvert The number to convert to a Phrase.
     * @return The numeric Phrase that corresponds to the given number that was passed.
     */
    public static Phrase convertIntegerToPhrase(int numberToConvert) {
        final Phrase[] NUM_PHRASE_ARRAY = new Phrase[]{
                Phrase.EMPTY,           Phrase.ONE,             Phrase.TWO,             Phrase.THREE,
                Phrase.FOUR,            Phrase.FIVE,            Phrase.SIX,             Phrase.SEVEN,
                Phrase.EIGHT,           Phrase.NINE,            Phrase.TEN,             Phrase.ELEVEN,
                Phrase.TWELVE,          Phrase.THIRTEEN,        Phrase.FOURTEEN,        Phrase.FIFTEEN,
                Phrase.SIXTEEN,         Phrase.SEVENTEEN,       Phrase.EIGHTEEN,        Phrase.NINETEEN,
                Phrase.TWENTY,          Phrase.TWENTY_ONE,      Phrase.TWENTY_TWO,      Phrase.TWENTY_THREE,
                Phrase.TWENTY_FOUR,     Phrase.TWENTY_FIVE,     Phrase.TWENTY_SIX,      Phrase.TWENTY_SEVEN,
                Phrase.TWENTY_EIGHT,    Phrase.TWENTY_NINE,     Phrase.THIRTY
        };

        /* Verify that passed number is between 0 & 30 (if not, throw an error) */
        if (numberToConvert < 0) {
            throw new IllegalArgumentException("The number to convert must be greater than or equal to 0!");
        }
        if (numberToConvert >= NUM_PHRASE_ARRAY.length) {
            throw new IllegalArgumentException("The number to convert must be less than " + NUM_PHRASE_ARRAY.length);
        }

        return NUM_PHRASE_ARRAY[numberToConvert];
    }

    /**
     * Converts a selected {@link Point} on the Sudoku board to a Phrase.
     *
     * @param selectedPoint The currently selected {@link Point} in the game.
     * @return The location on the board as a Phrase (e.g. "A2", "B3", etc.)
     */
    public static Phrase convertPointToLocationPhrase(@NotNull Point selectedPoint) {
        final Phrase[][] LOCATIONS_PHRASE_LIST = new Phrase[][]{
                new Phrase[] {A1, A2, A3, A4, A5, A6, A7, A8, A9},
                new Phrase[] {B1, B2, B3, B4, B5, B6, B7, B8, B9},
                new Phrase[] {C1, C2, C3, C4, C5, C6, C7, C8, C9},
                new Phrase[] {D1, D2, D3, D4, D5, D6, D7, D8, D9},
                new Phrase[] {E1, E2, E3, E4, E5, E6, E7, E8, E9},
                new Phrase[] {F1, F2, F3, F4, F5, F6, F7, F8, F9},
                new Phrase[] {G1, G2, G3, G4, G5, G6, G7, G8, G9},
                new Phrase[] {H1, H2, H3, H4, H5, H6, H7, H8, H9},
                new Phrase[] {I1, I2, I3, I4, I5, I6, I7, I8, I9},
        };

        // x value: 0 maps to "A", 1 maps to "B", etc.
        // y value: 0 maps to "1", 1 maps to "2", etc.
        return LOCATIONS_PHRASE_LIST[selectedPoint.x][selectedPoint.y];
    }

    /**
     * Getter for the phraseValue instance variable
     *
     * @return The value of the current Phrase.
     */
    public String getPhraseValue() {
        return this.phraseValue;
    }

    /**
     * Helper method to retrieve a SHA-256 hash of the current phraseValue.
     *
     * @return A SHA-256 hash of the current phraseValue (empty string if exception thrown).
     */
    private String getPhaseHashValue() {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
            messageDigest.update(this.phraseValue.getBytes(StandardCharsets.UTF_8));
            return String.format("%064x", new BigInteger(1, messageDigest.digest()));
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return "";
        }
    }

    /**
     * Used for calling into Google Cloud Text-to-Speech & generating the audio files.
     *
     * @return The {@link File} associated with the current Phrase.
     */
    public File getPhraseAudioFile() {
        return new File(
                String.format("%s/%s.wav", PHRASE_FILES_DIRECTORY.toString(), this.getPhaseHashValue())
        );
    }

    /**
     * Used when reading audio files in the game. Uses "resources" so that it works in a JAR file.
     *
     * @return The {@link InputStream} to the given Phrase.
     */
    public InputStream getPhraseInputStream() {
        // Audio file is a resource, which is under "phrases/<SHA_256_value>.wav"
        return ClassLoader.getSystemClassLoader().getResourceAsStream(
                String.format("phrases/%s.wav", this.getPhaseHashValue())
        );
    }
}
